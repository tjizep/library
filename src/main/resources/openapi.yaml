openapi: 3.0.0
info:
  title: ISBN Library
  description: This is library server. For this sample, you can use the api key `special-key` to test the authorization filters. For OAuth2 flow, you may use `user` as both username and password when asked to login.
  license:
    name: Apache-2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about OpenAPI generator
  url: https://openapi-generator.tech
tags:
- name: book
  description: Everything about your Books
- name: store
  description: Access to library operations
- name: user
  description: Operations about user
paths:
  /books:
    put:
      tags:
      - book
      summary: Update an existing book
      operationId: updateBook
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Book not found
        405:
          description: Validation exception
      security:
      - lirary_auth:
        - write:books
        - read:books
      x-accepts: application/json
      x-tags:
      - tag: book
      x-contentType: application/json
    post:
      tags:
      - book
      summary: Add a new book
      operationId: addBook
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        405:
          description: Invalid input
      x-accepts: application/json
      x-tags:
      - tag: book
      x-contentType: application/json
  /books/findByStatus:
    get:
      tags:
      - book
      summary: Finds Books by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findBooksByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - out
            - missing
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          description: Invalid status value

      x-accepts: application/json
      x-tags:
      - tag: book
  /books/findByAuthor:
    get:
      tags:
      - book
      summary: Finds Books by Author
      description: Multiple authors can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findBooksByAuthors
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          description: Invalid author name
      deprecated: true
#      security:
#      - lirary_auth:
#        - write:books
#        - read:books
      x-accepts: application/json
      x-tags:
      - tag: book
  /books/{bookId}:
    get:
      tags:
      - book
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
      - name: bookId
        in: path
        description: ID of book to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          description: Invalid ID supplied
        404:
          description: Book not found
      #security:
      #- api_key: []
      x-accepts: application/json
      x-tags:
      - tag: book
    post:
      tags:
      - book
      summary: Updates a book with form data
      operationId: updateBookWithForm
      parameters:
      - name: bookId
        in: path
        description: ID of book that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        405:
          description: Invalid input
      #security:
      #- lirary_auth:
      #  - write:books
      #  - read:books
      x-accepts: application/json
      x-tags:
      - tag: book
      x-contentType: application/x-www-form-urlencoded
    delete:
      tags:
      - book
      summary: Deletes a book
      operationId: deleteBook
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: bookId
        in: path
        description: Book id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid book value
      #security:
      #- library_auth:
      #  - write:books
      #  - read:books
      x-accepts: application/json
      x-tags:
      - tag: book
  /books/{bookId}/uploadImage:
    post:
      tags:
      - book
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: bookId
        in: path
        description: ID of book to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/body_1'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - lirary_auth:
        - write:books
        - read:books
      x-accepts: application/json
      x-tags:
      - tag: book
      x-contentType: multipart/form-data
  /library/inventory:
    get:
      tags:
      - store
      summary: Returns book inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
      x-accepts: application/json
      x-tags:
      - tag: store
  /library/borrow:
    post:
      tags:
      - store
      summary: Borrow a book
      operationId: placeBook
      requestBody:
        description: borrowing the book
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Borrow'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Borrow'
            application/json:
              schema:
                $ref: '#/components/schemas/Borrow'
        400:
          description: Invalid Borrow
      x-accepts: application/json
      x-tags:
      - tag: library
      x-contentType: application/json
  /library/borrow/{orderId}:
    get:
      tags:
      - store
      summary: Find borrow order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
      operationId: getBorrowById
      parameters:
      - name: orderId
        in: path
        description: ID of book that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          maximum: 5
          minimum: 1
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Borrow'
            application/json:
              schema:
                $ref: '#/components/schemas/Borrow'
        400:
          description: Invalid ID supplied
        404:
          description: Borrow not found
      x-accepts: application/json
      x-tags:
      - tag: library
    delete:
      tags:
      - store
      summary: Delete borrow by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteBorrow
      parameters:
      - name: borrowId
        in: path
        description: ID of the borrow that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Borrow not found
      x-accepts: application/json
      x-tags:
      - tag: library
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
      x-accepts: application/json
      x-tags:
      - tag: user
      x-contentType: application/json
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      x-accepts: application/json
      x-tags:
      - tag: user
      x-contentType: application/json
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
      x-accepts: application/json
      x-tags:
      - tag: user
      x-contentType: application/json
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when toekn expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username supplied
        404:
          description: User not found
      x-accepts: application/json
      x-tags:
      - tag: user
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        400:
          description: Invalid user supplied
        404:
          description: User not found
      x-accepts: application/json
      x-tags:
      - tag: user
      x-contentType: application/json
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        400:
          description: Invalid username supplied
        404:
          description: User not found
      x-accepts: application/json
      x-tags:
      - tag: user
components:
  schemas:
    Borrow:
      title: Book Borrow
      type: object
      properties:
        id:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        borrowDate:
          type: string
          format: date-time
        status:
          type: string
          description: Borrow Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      description: A borrow from the library
      example:
        bookId: 6
        quantity: 1
        id: 0
        borrowDate: 2000-01-23T04:56:07.000+00:00
        complete: false
        status: placed
      xml:
        name: Borrow
    Category:
      title: Book category
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: A category for a book
      example:
        name: name
        id: 6
      xml:
        name: Category
    User:
      title: a User
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      description: A User who is purchasing from the library
      example:
        firstName: firstName
        lastName: lastName
        password: password
        userStatus: 6
        phone: phone
        id: 0
        email: email
        username: username
      xml:
        name: User
    Tag:
      title: Book Tag
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      description: A tag for a book
      example:
        name: name
        id: 1
      xml:
        name: Tag
    Book:
      title: a Book
      required:
      - title
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        title:
          type: string
          maxLength: 100
          example: lotr
        isbn:
          type: string
          example: 9780306406157
        author:
          type: string
          example: JRR Tolkien
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: book status in the store
          enum:
          - available
          - requested
          - out
      description: A Book for lending in the library
      example:
        photoUrls:
        - photoUrls
        - photoUrls
        name: book
        id: 0
        category:
          name: name
          id: 6
        tags:
        - name: name
          id: 1
        - name: name
          id: 1
        status: available
      xml:
        name: Book
    ApiResponse:
      title: An uploaded response
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      description: Describes the result of uploading an image resource
      example:
        code: 0
        type: type
        message: message
    body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the book
        status:
          type: string
          description: Updated status of the book
    body_1:
      type: object
      properties:
        additionalMetadata:
          type: string
          description: Additional data to pass to server
        file:
          type: string
          description: file to upload
          format: binary
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
    Book:
      description: Book object that needs to be added to the library
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
        application/xml:
          schema:
            $ref: '#/components/schemas/Book'
      required: true
  securitySchemes:
    lirary_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: /api/oauth/dialog
          scopes:
            write:books: modify books in your account
            read:books: read your books
    api_key:
      type: apiKey
      name: api_key
      in: header
